#include "MiniGui.ch"** josé jucá de oliveira ** 12-06-2012** paf-ecf  versao 1.90  //----------------------------------------------------------------------------//// Funcoes para impressoras DARUMNA        //// Inicio das Declarações das Funcoes da DLL DarumaFrameWork.dll           ////----------------------------------------------------------------------------//DECLARE DLL_TYPE_INT iLeituraX_ECF_Daruma() IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rRetornarNumeroSerieCodificado_ECF_Daruma(DLL_TYPE_LPCSTR pszSerialCriptografado) IN DarumaFrameWork.dll*DECLARE DLL_TYPE_INT rGerarRelatorio_ECF_Daruma(DLL_TYPE_LPCSTR szRelatorio,DLL_TYPE_LPCSTR sztipo,DLL_TYPE_LPCSTR szInicial,DLL_TYPE_LPCSTR szFinal,DLL_TYPE_LPCSTR bemasaida) IN DarumaFrameWork.dll DECLARE DLL_TYPE_INT rVerificarImpressoraLigada_ECF_Daruma() IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rRetornarDadosReducaoZ_ECF_Daruma(DLL_TYPE_LPCSTR pszRetorno) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rRetornarInformacao_ECF_Daruma(DLL_TYPE_LPCSTR pszIndice,DLL_TYPE_LPCSTR pszRetornar) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rLerAliquotas_ECF_Daruma(DLL_TYPE_LPCSTR pszRetornar) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rVerificarReducaoZ_ECF_Daruma(DLL_TYPE_LPCSTR zPendente)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFAbrir_ECF_Daruma(DLL_TYPE_LPCSTR pszCPF, DLL_TYPE_LPCSTR pszNome, DLL_TYPE_LPCSTR pszEndereco ) IN DarumaFrameWork.dll*DECLARE DLL_TYPE_INT rStatusUltimoCmdInt_ECF_Daruma(DLL_TYPE_LPCSTR piErro, DLL_TYPE_LPCSTR piAviso) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT eInterpretarAviso_ECF_Daruma(DLL_TYPE_LPCSTR iAviso, DLL_TYPE_LPCSTR sMsg_Aviso) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT eInterpretarErro_ECF_Daruma(DLL_TYPE_LPCSTR iErro, DLL_TYPE_LPCSTR sMsg_Erro) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iReducaoZ_ECF_Daruma(DLL_TYPE_LPCSTR inical , DLL_TYPE_LPCSTR Final)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rStatusUltimoCmd_ECF_Daruma(DLL_TYPE_LPCSTR pszErro,DLL_TYPE_LPCSTR pszAviso,DLL_TYPE_LPCSTR piErro ,DLL_TYPE_LPCSTR piAviso) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rStatusUltimoCmdInt_ECF_Daruma(DLL_TYPE_LPCSTR piErro,DLL_TYPE_LPCSTR piAviso)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rStatusUltimoCmdStr_ECF_Daruma(DLL_TYPE_LPCSTR cErro, DLL_TYPE_LPCSTR cAviso)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rInfoEstentida_ECF_Daruma(DLL_TYPE_LPCSTR var,DLL_TYPE_LPCSTR char)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rStatusImpressora_DUAL_DarumaFramework()IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rDataHoraImpressora_ECF_Daruma(DLL_TYPE_LPCSTR pszData, DLL_TYPE_LPCSTR pszHora)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCNFCancelar_ECF_Daruma()IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFCancelar_ECF_Daruma() IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iSuprimentoPadrao_ECF_Daruma() IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iSuprimento_ECF_Daruma(DLL_TYPE_LPCSTR pszValor , DLL_TYPE_LPCSTR pszMensagem  ) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rStatusImpressoraBinario_ECF_Daruma(DLL_TYPE_LPCSTR pszStatus) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rConsultaStatusImpressoraInt_ECF_Daruma(DLL_TYPE_LPCSTR iIndice, DLL_TYPE_LPCSTR iRetorno)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rConsultaStatusImpressoraStr_ECF_Daruma(DLL_TYPE_LPCSTR iIndice, DLL_TYPE_LPCSTR szStatus)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFAbrirPadrao_ECF_Daruma() IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rCFVerificarStatus_ECF_Daruma(DLL_TYPE_LPCSTR pszStatus, DLL_TYPE_LPCSTR piStatus) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFVenderSemDesc_ECF_Daruma( DLL_TYPE_LPCSTR pszCargaTributaria,;                                                  DLL_TYPE_LPCSTR pszQuantidade      ,;                                                  DLL_TYPE_LPCSTR pszPrecoUnitario   ,;                                                  DLL_TYPE_LPCSTR pszCodigoItem      ,;                                                  DLL_TYPE_LPCSTR pszUnidadeMedida   ,;                                                  DLL_TYPE_LPCSTR pszDescricaoItem    )  IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFTotalizarCupom_ECF_Daruma( DLL_TYPE_LPCSTR TipoDescAcresc ,DLL_TYPE_LPCSTR VlrDescAcresc  )  IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFTotalizarCupomPadrao_ECF_Daruma()  IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFEfetuarPagamentoFormatado_ECF_Daruma( DLL_TYPE_LPCSTR pszFormaPgto, DLL_TYPE_LPCSTR pszValor) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFEncerrarConfigMsg_ECF_Daruma( DLL_TYPE_LPCSTR pszMensagem )  IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFCancelarItem_ECF_Daruma(DLL_TYPE_LPCSTR pszNumItem ) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT regSintegra_ECF_Daruma(DLL_TYPE_LPCSTR pszParametro1 ,DLL_TYPE_LPCSTR pszParametro2 ) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT rGerarRelatorio_ECF_Daruma( DLL_TYPE_LPCSTR pszRelatorio,;                                             DLL_TYPE_LPCSTR pszTipo     ,;                                             DLL_TYPE_LPCSTR pszInicial ,;                                             DLL_TYPE_LPCSTR pszFinal   ) IN DarumaFrameWork.dll		DECLARE DLL_TYPE_INT rGerarEspelhoMFD_ECF_Daruma(DLL_TYPE_LPCSTR pszTipo,DLL_TYPE_LPCSTR pszInicial,DLL_TYPE_LPCSTR pszFinal)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iMFLerSerial_ECF_Daruma(DLL_TYPE_LPCSTR pszInicial,DLL_TYPE_LPCSTR pszFinal) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iMFLer_ECF_Daruma(DLL_TYPE_LPCSTR pszInicial,DLL_TYPE_LPCSTR pszFinal)IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT regAlterarValor_Daruma(DLL_TYPE_LPCSTR pszPathChave,DLL_TYPE_LPCSTR pszValor)  IN DarumaFrameWork.dll Declare DLL_TYPE_INT regRetornaValorChave_DarumaFramework(DLL_TYPE_LPCSTR sProduto ,DLL_TYPE_LPCSTR sChave ,DLL_TYPE_LPCSTR sValor )  IN DarumaFrameWork.dll DECLARE DLL_TYPE_INT iImprimirArquivo_DUAL_DarumaFramework(DLL_TYPE_LPCSTR stPath, DLL_TYPE_LPCSTR pszNome, DLL_TYPE_LPCSTR pszEndereco ) IN DarumaFrameWork.dll*DECLARE DLL_TYPE_INT iCFImprimir_NFCe_Daruma(DLL_TYPE_LPCSTR StrPathXMLVenda, DLL_TYPE_LPCSTR StrPathRetornoWS,DLL_TYPE_LPCSTR iNumColunas,DLL_TYPE_LPCSTR iTipoNF ) IN DarumaFrameWork.dllDECLARE DLL_TYPE_INT iCFImprimir_NFCe_Daruma(DLL_TYPE_LPCSTR pszPathXMLVenda, DLL_TYPE_LPCSTR strPathRetornoWS, DLL_TYPE_LPCSTR pszLinkQrCode, DLL_TYPE_LPCSTR iNumColunas, DLL_TYPE_LPCSTR iTipoNF)IN DarumaFrameWork.dll	   Return /*// chamada da Aplicacao...*cAux:=upper(alltrim(substr(iLeituraX_ECF_Daruma("modelo"), 5)))if cAux = "ECFDARUMA"    if &("PAF_DARUMA(.t.,.t.)")        cAux:=space(14)        rStatusImpressora_ECF_Daruma(@cAux)        //SLF("Status ECF Daruma: "+cAux)        IpeA100rStatusImpressoraECFDaruma(cAux)        //    (25/11/2011 11:13:45): Versao DARUMAFRAMEWORK.DLL -> 05.23.08        //    (25/11/2011 11:13:45): Status ECF Daruma: 0020B00000C100        &("PAF_DARUMA(.f.)")    endifendif////////////////////////////////////////////////////////////////////////////////// inserido/alterado por: #toya:25/11/2011:11:33////////////////////////////////////////////////////////////////////////////////function IpeA100rStatusImpressoraECFDaruma(_cRetorno)local aAux:={}, aMsg:={}, aRetornoDaruma:=Hash(), aTabelaDecodificada:=Hash(), aStatus:=Hash()local cAux:="", cAux1:="", cMsg:=""local x:=0aRetornoDaruma["0"]:="0000"aRetornoDaruma["1"]:="0001"aRetornoDaruma["2"]:="0010"aRetornoDaruma["3"]:="0011"aRetornoDaruma["4"]:="0100"aRetornoDaruma["5"]:="0101"aRetornoDaruma["6"]:="0110"aRetornoDaruma["7"]:="0111"aRetornoDaruma["8"]:="1000"aRetornoDaruma["9"]:="1001"aRetornoDaruma["A"]:="1010"aRetornoDaruma["B"]:="1011"aRetornoDaruma["C"]:="1100"aRetornoDaruma["D"]:="1101"aRetornoDaruma["E"]:="1110"aRetornoDaruma["F"]:="1111"//aTabelaDecodificada["S100"]:="MFDE presente"aTabelaDecodificada["S101"]:="MFDE ausente"aTabelaDecodificada["S110"]:="MF presente"aTabelaDecodificada["S111"]:="MF ausente"aTabelaDecodificada["S120"]:="Jumper fechado"aTabelaDecodificada["S121"]:="Jumper aberto"aTabelaDecodificada["S130"]:="Modo Fiscal"aTabelaDecodificada["S131"]:="Em MIT ( ligado com o jumper aberto )"aTabelaDecodificada["S200"]:="MFDE inicializada"aTabelaDecodificada["S201"]:="MFDE não inicializada"aTabelaDecodificada["S210"]:="MF inicializada"aTabelaDecodificada["S211"]:="MF não inicializada"aTabelaDecodificada["S220"]:="MFDE disponível"aTabelaDecodificada["S221"]:="MFDE esgotada ou em erro irrecuperável"aTabelaDecodificada["S230"]:="MF disponível"aTabelaDecodificada["S231"]:="MF esgotada ou em erro irrecuperável"aTabelaDecodificada["S300"]:="Dia fiscal não aberto"aTabelaDecodificada["S301"]:="Em jornada fiscal"aTabelaDecodificada["S310"]:="Configuração do ECF habilitada"aTabelaDecodificada["S311"]:="Algum documento emitido após última RZ"aTabelaDecodificada["S320"]:="Tabela de decodificação de GT programada"aTabelaDecodificada["S321"]:="Nenhuma entrada na tabela de decodificação de GT"aTabelaDecodificada["S330"]:="Usuário programado"aTabelaDecodificada["S331"]:="Nenhum usuário programado"aTabelaDecodificada["S400"]:="Bobina de papel presente"aTabelaDecodificada["S401"]:="Bobina de papel ausente"aTabelaDecodificada["S410"]:="Near End não detectado"aTabelaDecodificada["S411"]:="Near End detectado"aTabelaDecodificada["S420"]:="Não há RZ pendente"aTabelaDecodificada["S421"]:="RZ do dia anterior pendente"aTabelaDecodificada["S430"]:="Ainda não emitiu RZ hoje ( com dia fiscal aberto )"aTabelaDecodificada["S431"]:="Já emitiu RZ não pendente hoje"aTabelaDecodificada["S500"]:="Documento presente"aTabelaDecodificada["S501"]:="Não há documento posicionado"aTabelaDecodificada["S510"]:="Cheque presente"aTabelaDecodificada["S511"]:="Não há cheque posicionado"aTabelaDecodificada["S520"]:="Slip selecionado"aTabelaDecodificada["S521"]:="Formulário selecionado"aTabelaDecodificada["S530"]:="Gaveta fechada"aTabelaDecodificada["S531"]:="Gaveta aberta"aTabelaDecodificada["S600"]:="Fim de impressão"aTabelaDecodificada["S601"]:="Impressão em andamento"aTabelaDecodificada["S610"]:="ECF On Line"aTabelaDecodificada["S611"]:="ECF Off Line"aTabelaDecodificada["S620"]:="Porta serial do Fisco livre"aTabelaDecodificada["S621"]:="Detectado cabo na porta serial do Fisco"aTabelaDecodificada["S630"]:="Algum caracter presente no buffer de comunicação"aTabelaDecodificada["S631"]:="Buffer de comunicação vazio"aTabelaDecodificada["S700"]:="Energia OK"aTabelaDecodificada["S701"]:="Queda de energia detectada"aTabelaDecodificada["S710"]:="Nenhum documento aberto"aTabelaDecodificada["S711"]:="Algum documento aberto"aTabelaDecodificada["S720"]:="Em operação"aTabelaDecodificada["S721"]:="ECF acaba de iniciar"aTabelaDecodificada["S730"]:="Lâmina da guilhotina aberta"aTabelaDecodificada["S731"]:="Guilhotina obstruída"aTabelaDecodificada["S800"]:="Não há cheque/documento obstruindo"aTabelaDecodificada["S801"]:="Aguardando remoção do cheque/documento"aTabelaDecodificada["S810"]:="Cheque posicionado"aTabelaDecodificada["S811"]:="Aguardando posicionamento do cheque (Informação correta apenas em modo cheque)"aTabelaDecodificada["S820"]:="Documento posicionado"aTabelaDecodificada["S821"]:="Aguardando posicionamento do documento (Informação correta apenas em modo autenticação)"aTabelaDecodificada["S830"]:="Papel carregado (bobina)"aTabelaDecodificada["S831"]:="Aguardando papel"aTabelaDecodificada["S900"]:="Tampa fechada"aTabelaDecodificada["S901"]:="Tampa aberta"aTabelaDecodificada["S910"]:="Sem impedimento para entrar em MIT"aTabelaDecodificada["S911"]:="Aguardando ajuste do RTC para entrar em MIT"aTabelaDecodificada["S920"]:="ECF ativo"aTabelaDecodificada["S921"]:="Restaurando dados da MT a partir da MFDE"aTabelaDecodificada["S930"]:="ECF operacional"aTabelaDecodificada["S931"]:="ECF bloqueado"aTabelaDecodificada["S1000"]:=""aTabelaDecodificada["S1001"]:="Buzina ativa"aTabelaDecodificada["S1010"]:=""aTabelaDecodificada["S1011"]:="Impressão em pausa"aTabelaDecodificada["S1020"]:=""aTabelaDecodificada["S1021"]:="Tampa da cabeça térmica aberta"aTabelaDecodificada["S1030"]:=""aTabelaDecodificada["S1031"]:="Modo CMC-7 e cheque carregado"aTabelaDecodificada["S1100"]:=""aTabelaDecodificada["S1101"]:="Relógio em falha"aTabelaDecodificada["S1110"]:=""aTabelaDecodificada["S1111"]:="Reservado para uso futuro"aTabelaDecodificada["S1120"]:=""aTabelaDecodificada["S1121"]:="Módulo impressor OK"aTabelaDecodificada["S1130"]:=""aTabelaDecodificada["S1131"]:="Módulo impressor pronto ( iniciado )"aTabelaDecodificada["S1200"]:=""aTabelaDecodificada["S1201"]:="Iniciação concluída"aTabelaDecodificada["S1210"]:=""aTabelaDecodificada["S1211"]:="Entrando ou saindo de MIT"aTabelaDecodificada["S1220"]:=""aTabelaDecodificada["S1221"]:="Operação de gravação de MFDE em andamento"aTabelaDecodificada["S1230"]:=""aTabelaDecodificada["S1231"]:="Superaquecimento da cabeça térmica"aTabelaDecodificada["S1300"]:=""aTabelaDecodificada["S1301"]:="MT inconsistente"aTabelaDecodificada["S1310"]:=""aTabelaDecodificada["S1311"]:="MF removida"aTabelaDecodificada["S1320"]:=""aTabelaDecodificada["S1321"]:="Erro na gravação da MFDE"aTabelaDecodificada["S1330"]:=""aTabelaDecodificada["S1331"]:="Erro na leitura da MFDE ou MFDE substituída"aTabelaDecodificada["S1400"]:=""aTabelaDecodificada["S1401"]:="Clichê danificado"aTabelaDecodificada["S1410"]:=""aTabelaDecodificada["S1411"]:="Erro no RTC"aTabelaDecodificada["S1420"]:=""aTabelaDecodificada["S1421"]:="Erro na gravação da MF"aTabelaDecodificada["S1430"]:=""aTabelaDecodificada["S1431"]:="Erro na leitura da MF ou MF substituída"//for x=1 to 14    cAux1:="S"+alltrim(str(x))    aStatus[cAux1]:=Hash()    aStatus[cAux1]["0"]:=Hash()    aStatus[cAux1]["0"]["0"]:=aTabelaDecodificada[cAux1+"00"]    aStatus[cAux1]["0"]["1"]:=aTabelaDecodificada[cAux1+"01"]    aStatus[cAux1]["1"]:=Hash()    aStatus[cAux1]["1"]["0"]:=aTabelaDecodificada[cAux1+"10"]    aStatus[cAux1]["1"]["1"]:=aTabelaDecodificada[cAux1+"11"]    aStatus[cAux1]["2"]:=Hash()    aStatus[cAux1]["2"]["0"]:=aTabelaDecodificada[cAux1+"20"]    aStatus[cAux1]["2"]["1"]:=aTabelaDecodificada[cAux1+"21"]    aStatus[cAux1]["3"]:=Hash()    aStatus[cAux1]["3"]["0"]:=aTabelaDecodificada[cAux1+"30"]    aStatus[cAux1]["3"]["1"]:=aTabelaDecodificada[cAux1+"31"]nextaMsg:={}cMsg:=""for x=1 to len(_cRetorno)    cAux:=aRetornoDaruma[substr(_cRetorno, x, 1)]    cAux1:="S"+alltrim(str(x))    aadd(aMsg, {padr(cAux1, 4)+" b0", aStatus[cAux1]["0"][substr(cAux, 1, 1)]}) ; cMsg+="["+aMsg[len(aMsg), 1]+"] : "+aMsg[len(aMsg), 2]+CRLF    aadd(aMsg, {padr(cAux1, 4)+" b1", aStatus[cAux1]["1"][substr(cAux, 2, 1)]}) ; cMsg+="["+aMsg[len(aMsg), 1]+"] : "+aMsg[len(aMsg), 2]+CRLF    aadd(aMsg, {padr(cAux1, 4)+" b2", aStatus[cAux1]["2"][substr(cAux, 3, 1)]}) ; cMsg+="["+aMsg[len(aMsg), 1]+"] : "+aMsg[len(aMsg), 2]+CRLF    aadd(aMsg, {padr(cAux1, 4)+" b3", aStatus[cAux1]["3"][substr(cAux, 4, 1)]}) ; cMsg+="["+aMsg[len(aMsg), 1]+"] : "+aMsg[len(aMsg), 2]+CRLFnext//SLF(CRLF+ cMsg)? cMsgreturn nil*/